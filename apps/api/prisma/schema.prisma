// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // change from default
}

generator zod {
  provider = "zod-prisma"
  output   = "./zods"
}

datasource db {
  provider = "sqlite" // d1 is sql base database
  url      = env("DATABASE_URL")
}

model Project {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique

  codes    Code[]
  File     File[]
  Partners User[] @relation("Partners")

  @@index([id])
  @@index([ownerId])
}

model User {
  id     String  @id @default(cuid())
  email  String  @unique
  name   String
  avatar String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Code         Code[]
  Projects     Project[]      @relation("Partners")
  File         File[]
  FileWithCode FileWithCode[]

  defaultProject Project? @relation("Owner")

  @@index([id])
  @@index([email])
}

model FileWithCode {
  id String @id @default(cuid())

  code   Code   @relation(fields: [codeId], references: [id])
  codeId String

  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  createdAt DateTime @default(now())
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?

  @@index([fileId, codeId])
  @@index([ownerId])
}

model File {
  id       String  @id @default(cuid())
  name     String
  size     Int
  type     String
  disabled Boolean @default(false)

  key  String // s3 path
  hash String // sha256 hash

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // stats
  downloads        Int       @default(0)
  lastDownloadedAt DateTime?

  // related
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  codes FileWithCode[]

  @@index([id])
  @@index([ownerId])
  @@index([projectId])
  @@index([hash])
  @@index([name])
  @@index([disabled])
}

model Code {
  id   String @id @default(cuid())
  code String @unique

  slug String? @unique

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // stats
  retrieves       Int       @default(0)
  lastRetrievedAt DateTime?

  // related
  files FileWithCode[]

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@index([id])
  @@index([ownerId])
  @@index([projectId])
  @@index([slug])
  @@index([code])
}
